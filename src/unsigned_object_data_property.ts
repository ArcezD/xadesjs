import { XmlXades } from "./xml";
import { XmlXadesObject, XmlXadesCollection } from "./xml_xades";

/**
 * The UnsignedDataObjectProperties element contains a collection of Cert elements
 */
export class UnsignedDataObjectProperties extends XmlXadesCollection<UnsignedDataObjectProperty> {

    protected name = XmlXades.ElementNames.UnsignedDataObjectProperties;

    // Protetced methods

    protected OnLoadChildElement(element: Element): any {
        if (element.namespaceURI === XmlXades.NamespaceURI && element.localName === XmlXades.ElementNames.UnsignedDataObjectProperty) {
            let obj = new UnsignedDataObjectProperty();
            obj.LoadXml(element);
            return obj;
        }
    }
}

/**
 * This class contains properties that qualify some of the signed data
 * objects. The signature generated by the signer does not cover the content
 * of this element.
 * This information is added for the shake of completeness and to cope with
 * potential future needs for inclusion of such kind of properties.
 */
export class UnsignedDataObjectProperty extends XmlXadesObject {

    protected name = XmlXades.ElementNames.UnsignedDataObjectProperty;

    // Public properties
    /**
     * The generic XML element that represents an unsigned data object
     */
    public AnyXmlElement: Element;

    // Protected methods

    // Public methods
    /**
     * Check to see if something has changed in this instance and needs to be serialized
     * @returns Flag indicating if a member needs serialization
     */
    public HasChanged(): boolean {
        let retVal = false;

        if (this.AnyXmlElement) {
            retVal = true;
        }

        return retVal;
    }

    /**
     * Load state from an XML element
     * @param {Element} element XML element containing new state
     */
    public LoadXml(xmlElement: Element): void {
        this.AnyXmlElement = xmlElement;
    }

    /**
     * Returns the XML representation of the this object
     * @returns XML element containing the state of this object
     */
    public GetXml(): Element {
        let document = this.CreateDocument();
        let element = this.CreateElement(document);

        if (this.AnyXmlElement) {
            element.appendChild(document.importNode(this.AnyXmlElement, true));
        }

        return element;
    }

}
